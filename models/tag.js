const mongoose = require('mongoose');
/**
 * @file models/tag.js File of Tag schema
 */

/**
 * @namespace TagSchema
 * @property {ObjectId} _id - Object Id, internally generated by MongoDB
 * @property {string} name - Display name for tag
 * @property {Boolean} isSchool - represents if the tag represents an institute
 * @property {string} slug - A compressed version of name, in development
 * @property {Array<ObjectId>} followers - Array of object Id's of followers
 */
const TagSchema = new mongoose.Schema({
  name: {
    type: String,
    unique: true,
    required: [true, 'Please provide a display name for tag'],
  },
  isSchool: {
    type: Boolean,
    default: false,
  },
  slug: {
    //* Alternate Versions for the Tag
    type: String,
    unique: true,
  },
  followers: [
    {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'User',
    },
  ],
});

const generateSlug = (name) => name.replace(/\s+/g, '-').toLowerCase();

/**
 * @memberof TagSchema
 * @function pre-save-hook
 * @description Converts the Tag name into slug before saving.Uses mongoose schema hooks.
 */
TagSchema.pre('save', function addSlug(next) {
  const slug = generateSlug(this.name);
  this.slug = slug;
  next();
});

/**
 * @memberof TagSchema
 * @function pre-update-hook
 * @description Converts the Tag name into slug before save in findOneAndUpadte.Uses mongoose schema hooks.
 */
TagSchema.pre('findOneAndUpdate', async function addSlug(next) {
  const name = this.get('name');
  if (!name) {
    next();
  }
  const slug = generateSlug(name);
  this.set({ slug });
  next();
});

module.exports = mongoose.model('Tag', TagSchema);
